<style>
  .selected-variant {
    background-color: #FFF0DF !important;
    border-color: #ff991b !important;
  }
  .force-reflow {
    transform: scale(1.0001);
  }
</style>

<div
  x-data="floatingAtc()"
  x-show="visible"
  x-transition:enter="transition ease-out duration-300"
  x-transition:enter-start="opacity-0 translate-y-4"
  x-transition:enter-end="opacity-100 translate-y-0"
  x-transition:leave="transition ease-in duration-200"
  x-transition:leave-start="opacity-100 translate-y-0"
  x-transition:leave-end="opacity-0 translate-y-4"
  class="hidden p-5 text-base floating-atc bg-white flex-col rounded-md shadow-md border border-gray-200 fixed bottom-10 left-1/2 -translate-x-1/2 w-96 z-[1000000]"
  x-init="init()"
>
  <button style="right:20px;" x-on:click="visible = false; event.preventDefault(); event.stopPropagation();" class="absolute top-2 right-2 text-gray-400 hover:text-black text-xl leading-none">
  &times;
</button>

  <div
    x-data="{ showVariants: false }"
    :class="showVariants ? 'mb-3 mt-5' : 'mb-0 mt-0'"
    class="choose-different-option">
    {% if product.variants.size > 1 %}
      <button class="absolute left-1/2 px-4 py-1 -translate-x-1/2 text-sm text-gray-500 flex gap-2 items-center justify-center top-[-10px] bg-gray-100 border border-gray-200 rounded-full" @click="event.preventDefault(); event.stopPropagation(); showVariants = !showVariants">
        Choose options
        <img
          width="100"
          height="100"
          lazy="true"
          :class="showVariants ? 'rotate-90' : '-rotate-90'"
          class="w-3 h-3 object-contain transition-transform duration-300"
          src="{{ 'arrow-long.png' |  asset_img_url: 'master' }}"
          alt="">
      </button>
      <div x-show="showVariants" x-transition>
        <ul class="grid grid-cols-2 gap-3">
          {% for variant in product.variants %}
            <li class="col-span-2">
              <button
                data-quick-id="{{ variant.id }}"
                class="text-sm border flex items-center justify-between border-gray-100 w-full text-left p-3 bg-gray-50 rounded-md"
                @click="event.preventDefault(); event.stopPropagation(); updateVariant('{{ variant.title }}', '{{ variant.id }}')">{{ variant.title }}
                <span class="font-bold pl-5 block">{{ variant.price | money }}</span>
              </button>
            </li>
          {% endfor %}
        </ul>
      </div>
    {% endif %}
  </div>
  {% if product.variants.size > 1 %}
    <div class="flex flex-col mb-3">
      <span class="text-sm text-gray-400">Selected:</span>
      <span class="bundle-name text-base" x-text="bundleName"></span>
    </div>
  {% else %}
    <div class="flex flex-col mb-3">
      <span class="bundle-name text-base">{{ product.title }}</span>
    </div>
  {% endif %}
  <button
    class="
          bg-[#fad94c] floating-atc flex text-center font-medium px-5 py-3 rounded-md text-base
          items-center justify-center text-black 
          {% if selected_variant and selected_variant.available == false %}
            disabled
          {% endif %}
        "
    type="submit"
    {% if selected_variant and selected_variant.available == false %}
    disabled
    {% endif %}
    {% if product.template_suffix contains 'pre-order' %}
    data-product-atc-preorder
    {% endif %}
    onclick="addToCartPDPFBE()">
    <span class="atc-button--text !mt-0">
      {% unless selected_variant and selected_variant.available == false %}
        {% if product.template_suffix contains 'pre-order' %}
          {{ 'product.buttons.pre_order' | t }}
        {% else %}
          <span class="atc-title">Add to Cart</span>
        {% endif %}
      {% else %}
        {{ 'product.buttons.sold_out' | t }}
      {% endunless %}
    </span>
    <svg
      class="animate-spin hidden atc-spin h-5 w-5 text-white"
      xmlns="http://www.w3.org/2000/svg"
      fill="none"
      viewBox="0 0 24 24">
      <circle
        class="opacity-25"
        cx="12"
        cy="12"
        r="10"
        stroke="currentColor"
        stroke-width="4"></circle>
      <path
        class="opacity-75"
        fill="currentColor"
        d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
    </svg>
  </button>
</div>

<script>
  function floatingAtc() {
    return {
      originalButton: null,
      floatingButton: null,
      visible: true,
      hasScrolled: false,
      bundleName: '',
      init() {
        this.originalButton = document.querySelector('.product-form--atc-button');
        this.floatingButton = this.$el;

        // Continue with the rest of the initialization logic
        this.initSelectedVariant();

        const variantOptionElement = document.querySelector('[data-variant-option-chosen-value]');
        if (variantOptionElement) {
          this.bundleName = variantOptionElement.getAttribute('data-variant-option-chosen-value') || '';
        }

        const intersectionObserver = new IntersectionObserver(
          ([entry]) => {
            if (entry.isIntersecting) {
              this.floatingButton.classList.remove('atc-in');
              this.floatingButton.classList.add('atc-out');
            } else {
              const buttonRect = this.originalButton.getBoundingClientRect();
              if (buttonRect.top < 0) {
                this.floatingButton.classList.remove('atc-out');
                this.floatingButton.classList.add('atc-in');
                this.floatingButton.classList.remove('!hidden');
              }
            }
          },
          { threshold: 0 }
        );

        intersectionObserver.observe(this.originalButton);

        window.addEventListener('scroll', () => {
  if (!this.visible) return; // ⛔ skip if hidden
  if (!this.hasScrolled) {
    this.hasScrolled = true;
    this.floatingButton.classList.add('flex');
  }
  this.checkScrollPosition();
});


        // Add click event listener to the variant option names
        const optionValueNames = document.querySelectorAll('.options-selection__option-value-name');
        optionValueNames.forEach(option => {
          option.addEventListener('click', (event) => {
            const input = option.closest('label').querySelector('.options-selection__option-value-input');
            if (input) {
              const variantId = input.getAttribute('data-variant-id');
              this.updateVariant(option.textContent, variantId);
            }
          });
        });

        // Add click event listener to the floating ATC button
        this.floatingButton.addEventListener('click', () => {
          const atcTitle = this.floatingButton.querySelector('.atc-title');
          const atcSpin = this.floatingButton.querySelector('.atc-spin');

          if (atcTitle && atcSpin) {
            // Hide the title and show the spinner
            atcTitle.classList.add('hidden');
            atcSpin.classList.remove('hidden');

            // Set a timeout to revert the changes after 4 seconds
            setTimeout(() => {
              atcTitle.classList.remove('hidden');
              atcSpin.classList.add('hidden');
            }, 3000);
          }
        });
      },
      initSelectedVariant() {
        // Extract the variant ID from the URL
        const urlParams = new URLSearchParams(window.location.search);
        const selectedVariantId = urlParams.get('variant'); // Assuming the variant ID is in the URL as ?variant=ID

        const variantButtons = document.querySelectorAll('[data-quick-id]');
        if (variantButtons.length > 0) {
          variantButtons.forEach((button, index) => {
            if (selectedVariantId) {
              if (button.getAttribute('data-quick-id') === selectedVariantId) {
                button.classList.add('selected-variant'); // Add selected class
              } else {
                button.classList.remove('selected-variant'); // Remove selected class from others
              }
            } else if (index === 0) {
              // If no variant is specified in the URL, select the first variant
              button.classList.add('selected-variant'); // Add selected class to the first variant
            }
          });
        }
      },
      checkScrollPosition() {
  if (!this.visible) return; // ⛔ skip if user hid it

  const buttonRect = this.originalButton.getBoundingClientRect();
  if (buttonRect.top < 0 && buttonRect.bottom < 0) {
    this.floatingButton.classList.add('flex');
    this.floatingButton.classList.remove('hidden');
    this.floatingButton.classList.remove('atc-out');
    this.floatingButton.classList.add('atc-in');
  } else {
    this.floatingButton.classList.remove('atc-in');
    this.floatingButton.classList.add('atc-out');
  }
},

      updateVariant(title, id) {
        this.bundleName = title; // Update the chosen value

        const variantSelection = document.querySelector('[data-variant-selection]');
        if (variantSelection) {
            variantSelection.setAttribute('data-variant', id); // Update the variant id
            variantSelection.setAttribute('variant', id); // Update the variant attribute
        }

        const variantOptionElement = document.querySelector('[data-variant-option-chosen-value]');
        if (variantOptionElement) {
            
            variantOptionElement.setAttribute('data-variant-option-chosen-value', title); // Update the variant title
        } else {
            
        }

        // Update the selected variant styles in the floating ATC
        const variantButtons = document.querySelectorAll('[data-quick-id]');
        variantButtons.forEach(button => {
            if (button.getAttribute('data-quick-id') === id) {
                button.classList.add('selected-variant'); // Add selected class
            } else {
                button.classList.remove('selected-variant'); // Remove selected class
            }
        });

        // Update the checked state of the corresponding input
        const inputs = document.querySelectorAll('.options-selection__option-value-input');
        inputs.forEach(input => {
            const spanElement = input.nextElementSibling;
            if (input.getAttribute('data-variant-id') === id) {
                input.checked = true; // Check the input if the variant ID matches
                if (spanElement) {
                    spanElement.classList.add('selected-variant'); // Add class
                 
                }
            } else {
                input.checked = false; // Uncheck other inputs
                if (spanElement) {
                    spanElement.classList.remove('selected-variant'); // Remove class
               
                }
            }
        });

        // Force a reflow when a variant is clicked
        forceReflow();

        // Update the URL with the selected variant ID
        const url = new URL(window.location);
        url.searchParams.set('variant', id); // Append or update the variant ID in the URL
        window.history.pushState({}, '', url); // Update the browser's URL without reloading
      }
    }
  }

  function forceReflow() {
    // Select the specific element that needs a reflow
    const element = document.querySelector('.options-selection__option-values');
    if (!element) return; // Exit if the element is not found

    // Save the current scroll position
    const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
    const scrollLeft = window.pageXOffset || document.documentElement.scrollLeft;

    // Apply the animation class
    element.classList.add('force-reflow');

    // Remove the class after the animation ends
    setTimeout(() => {
        element.classList.remove('force-reflow');
        // Restore the scroll position
        window.scrollTo(scrollLeft, scrollTop);
    }, 100);
  }

  // Call this function whenever you need to force a reflow
  forceReflow();
</script>