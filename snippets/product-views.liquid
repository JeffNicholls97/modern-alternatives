{% if template contains 'product' or template contains 'cart' %}
    {% assign views_range = '' %}
    {% assign views_interval = 5 %}
    {% if template contains 'product' %}
        {% if product.metafields.template.product_page_range_views != blank %}
            {% assign views_range = product.metafields.template.product_page_range_views %}
        {% else %}
            {% assign views_range = settings.views_pdp %}
        {% endif %}
    {% elsif template contains 'cart' %}
        {% assign views_range = settings.views_cart %}
    {% endif %}
    <style>
        .live-people-views,
        .live-people-views .live-people-views-wrap {
            display: flex;
            align-items: center;
        }
        .live-people-views .live-people-views-wrap {
            padding: 5px 0 0;
        }
        .live-people-views .live-people-views-icon {
            display: flex;
            align-items: center;
            padding-right: 3px;
        }
        .live-people-views .live-people-views-icon svg {
            height: 16px;
        }
        .live-people-views .live-people-views-text {
            line-height: 0;
        }
        {% if template contains 'cart' %}
        .cart-title {
            margin-top: 20px;
        }
        .live-people-views {
            border-radius: 50px;
            padding: 6px 0 10px;
            margin: 50px 0 20px;
            justify-content: center;
            background-color: rgba(255, 235, 210, 1);
        }
        .live-people-views .live-people-views-icon {
            padding-right: 0;
        }
        .live-people-views .live-people-views-icon .live-people-views-pulse {
            background: rgba(255, 153, 28, 1);
            border: 1px solid #FFF;
            border-radius: 50%;
            margin: 10px;
            height: 12px;
            width: 12px;

            box-shadow: 0 0 0 0 rgba(255, 153, 28, 1);
            transform: scale(1);
            animation: pulse 2s infinite;
        }
        @keyframes pulse {
            0% {
                transform: scale(0.95);
                box-shadow: 0 0 0 0 rgba(255, 153, 28, 0.7);
            }

            70% {
                transform: scale(1);
                box-shadow: 0 0 0 10px rgba(255, 153, 28, 0)
            }

            100% {
                transform: scale(0.95);
                box-shadow: 0 0 0 0 rgba(255, 153, 28, 0);
            }
        }
        {% endif %}
    </style>
    <live-people-views class="live-people-views" data-interval="{{ views_interval }}" data-views-range="{{ views_range }}">
        <div class="live-people-views-wrap">
            <div class="live-people-views-icon">
                {% if template contains 'product' %}
                    {% render 'eye-icon' %}
                {% elsif template contains 'cart' %}
                    <span class="live-people-views-pulse"></span>
                {% endif %}
            </div>
            <div class="live-people-views-text">
                <span class="current-views"></span>
                <span>
                    {% if template contains 'product' %}
                    people are currently viewing this product
                    {% elsif template contains 'cart' %}
                    people are checking out now
                    {% endif %}
                </span>
            </div>
        </div>
    </live-people-views>
    <script>
        customElements.define('live-people-views', class LivePeopleViews extends HTMLElement {
            constructor() {
                super();
                this.currentViews = this.querySelector('.current-views');
                this.minRange = parseInt(this.dataset.viewsRange.split('-')[0]);
                this.maxRange = parseInt(this.dataset.viewsRange.split('-')[1]);
                if(this.currentViews && this.minRange && this.maxRange){
                    this.currentViews.textContent = this.getCurrentViewsInt(this.minRange, this.maxRange);
                    setInterval(() => {
                        this.currentViews.textContent = this.getCurrentViewsInt(this.minRange, this.maxRange);
                    }, (this.dataset.interval * 1000));
                }
            }
            getCurrentViewsInt(min, max) {
                min = Math.ceil(min);
                max = Math.floor(max);
                return Math.floor(Math.random() * (max - min) + min); // The maximum is exclusive and the minimum is inclusive
            }
        });
    </script>
{% endif %}