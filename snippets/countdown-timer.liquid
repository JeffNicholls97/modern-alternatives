<style>
  .countdown-unit {
    width: 70px;
    height: 70px;
    background-color: white;
    display: flex;
    justify-content: center;
    align-items: center;
    border-radius: 10px;
    border: 1px solid #f1f1f1;
    flex-direction: column;
    font-size: 25px;
    font-weight: bold;
    overflow: hidden;
    position: relative;
  }

  .countdown-unit span {
    font-size: 12px;
    font-weight: normal;
  }

  .countdown-unit .number {
    animation: flip 0.6s ease;
  }

  @keyframes flip {
    0% {
      transform: rotateX(90deg);
      opacity: 0;
    }
    50% {
      transform: rotateX(0deg);
      opacity: 1;
    }
    100% {
      transform: rotateX(0deg);
      opacity: 1;
    }
  }

</style>

<div id="countdown-container" class="w-full flex-col lg:flex-row text-center lg:text-left p-5 flex gap-3 lg:gap-10 items-center justify-start lg:justify-between bg-[#F7F7F7] rounded-lg mb-5">
  <div class="flex flex-col">
    <h3>{{ block.settings.countdown_header }}</h3>
    <p class="text-[#B0B0B0] mt-2">{{ block.settings.countdown_body }}</p>
  </div>

  <div class="flex items-center justify-start lg:justify-center gap-2" id="timer"></div>
  <div class="w-full hidden bg-gray-200 rounded-full h-4 mt-5">
    <div
      id="progress-bar"
      class="bg-green-500 h-4 rounded-full"
      style="width: 0%;"></div>
  </div>
</div>

<script>
  // Set the countdown date from the schema
  //2024-12-05 00:00:00
  const countdownDateString = "{{ block.settings.countdown_date }}";
  //const countdownDateString = "2024-12-04 18:24:00";
  const countDownDate = new Date(countdownDateString).getTime();

  // Get the total countdown duration
  const totalDuration = countDownDate - new Date().getTime();

  function updateUnit(element, newValue) {
    if (newValue > 0 || element.dataset.label === "Sec") {
      const currentValue = element.querySelector(".number")?.textContent;
      if (currentValue !== String(newValue)) {
        element.innerHTML = `
          <div class="number">${newValue}</div>
          <span>${element.dataset.label}</span>
        `;
        element.style.display = "flex";
      }
    } else {
      element.style.display = "none";
    }
  }

  function updateTimer() {
    const now = new Date().getTime();
    const distance = countDownDate - now;

    const days = Math.floor(distance / (1000 * 60 * 60 * 24));
    const hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
    const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
    const seconds = Math.floor((distance % (1000 * 60)) / 1000);

    updateUnit(document.querySelector(".countdown-unit.days"), days);
    updateUnit(document.querySelector(".countdown-unit.hours"), hours);
    updateUnit(document.querySelector(".countdown-unit.minutes"), minutes);
    updateUnit(document.querySelector(".countdown-unit.seconds"), seconds);

    const progress = Math.max(0, ((totalDuration - distance) / totalDuration) * 100);
    document.getElementById("progress-bar").style.width = progress + "%";

    if (distance <= 0) {
    clearInterval(timerInterval);
    document.getElementById("countdown-container").classList.add('hidden'); // Correct usage of classList.add
}

  }

  function initializeTimer() {
    const timerElement = document.getElementById("timer");
    timerElement.innerHTML = `
      <div class="countdown-unit days" data-label="Days"></div>
      <div class="countdown-unit hours" data-label="Hours"></div>
      <div class="countdown-unit minutes" data-label="Mins"></div>
      <div class="countdown-unit seconds" data-label="Sec"></div>
    `;
    updateTimer();
  }

  initializeTimer();
  const timerInterval = setInterval(updateTimer, 1000);
</script>