<script>
    var Shopify = Shopify || {};
    // ---------------------------------------------------------------------------
    // Money format handler
    // ---------------------------------------------------------------------------
    Shopify.money_format = "{{ shop.money_format }}";
    Shopify.formatMoneyCalc = function(cents, format) {
        if (typeof cents == 'string') { cents = cents.replace('.',''); }
        var value = '';
        var placeholderRegex = /\{\{\s*(\w+)\s*\}\}/;
        var formatString = (format || this.money_format);

        function defaultOption(opt, def) {
            return (typeof opt == 'undefined' ? def : opt);
        }

        function formatWithDelimiters(number, precision, thousands, decimal) {
            precision = defaultOption(precision, 2);
            thousands = defaultOption(thousands, ',');
            decimal   = defaultOption(decimal, '.');

            if (isNaN(number) || number == null) { return 0; }

            number = (number/100.0).toFixed(precision);

            var parts   = number.split('.'),
                dollars = parts[0].replace(/(\d)(?=(\d\d\d)+(?!\d))/g, '$1' + thousands),
                cents   = parts[1] ? (decimal + parts[1]) : '';

            return dollars + cents;
        }

        switch(formatString.match(placeholderRegex)[1]) {
            case 'amount':
                value = formatWithDelimiters(cents, 2);
                break;
            case 'amount_no_decimals':
                value = formatWithDelimiters(cents, 0);
                break;
            case 'amount_with_comma_separator':
                value = formatWithDelimiters(cents, 2, '.', ',');
                break;
            case 'amount_no_decimals_with_comma_separator':
                value = formatWithDelimiters(cents, 0, '.', ',');
                break;
        }

        return formatString.replace(placeholderRegex, value);
    };

    function eventController(event, element){
        if(element.name === 'appliance-name'){
            calculatorApplianceName(event, element);
        } else if (element.name === 'watts'){
            calculatorWatts(event, element);
        } else if (element.name === 'quantity'){
            calculatorQuantity(event, element);
        } else if (element.name === 'hoursOfUse'){
            calculatorHoursOfUse(event, element);
        } else if(element.name === 'removeRow'){
            calculatorRemoveRow(event, element);
        } else if(element.name === 'addSection'){
            addSection(event, element);
        }
    }
    function applyValuesToRow(row, optionData, applianceName){
        applianceName.dataset.value = JSON.stringify(optionData);
        for (const [key, value] of Object.entries(optionData)) {
            const input = row.querySelector(`[name="${key}"]`);
            if(input){
                input.value = value;
            }
        }
    }
    function calculateRowTotals(optionData){
        const watts = Number(optionData.watts);
        const quantity = parseInt(optionData.quantity);
        const hoursOfUse = Number(optionData.hoursOfUse);
        optionData.totalWatts = `${watts * quantity}`;
        optionData.wattHours = `${quantity * watts * hoursOfUse}`;
        return optionData;
    }
    function specialCasesTableTypeStringChecker(string){
        if(string === 'off_grid'){
            return 'Off-Grid';
        }else{
            let arr = string.replace('_', ' ').split(' ');
            arr =  arr.map(element => {
                return element.charAt(0).toUpperCase() + element.slice(1).toLowerCase();
            });
            string = arr.join(' ');
            return string;
        }
    }
    function calculateTotals(){
        const ave_sun_hours = 5;
        let inv_total = 0;
        let batt_total = 0;
        let pan_total = 0;
        const lines = document.querySelectorAll('#calculator-lines .calculator-line');
        const total_watt_hours_per_day = document.querySelector('#total-watt-hours-per-day');
        const kilowatt_hours_per_month = document.querySelector('#kilowatt-hours-per-month');
        let total_watt_hours_per_day_value = 0;
        let kilowatt_hours_per_month_value = 0;
        lines.forEach(row => {
            const applianceName = row.querySelector(`[name="appliance-name"]`);
            if(applianceName && applianceName.dataset.value){
                try{
                    let optionData = JSON.parse(applianceName.dataset.value);
                    if(optionData){
                        total_watt_hours_per_day_value += parseInt(optionData.wattHours);
                        inv_total += parseInt(optionData.totalWatts);
                        batt_total += parseInt(optionData.wattHours);
                    }
                } catch (e){
                    alert('Unable to count totals.');
                }
            }
        })
        kilowatt_hours_per_month_value = (total_watt_hours_per_day_value * 30 / 1000).toFixed(0).toString();
        total_watt_hours_per_day.textContent = total_watt_hours_per_day_value;
        kilowatt_hours_per_month.textContent = kilowatt_hours_per_month_value;

        pan_total += Number(batt_total/ave_sun_hours).toFixed(0);
        //console.log(inv_total+'-'+batt_total+'-'+pan_total);
        const tableKits = document.querySelectorAll('.calculator-compatible-kits');
        if(tableKits.length){
            if(inv_total > 0 && batt_total > 0 && pan_total > 0){
                let compatibleKits = kitsData.filter((item) => item['INV'] > inv_total && item['BATT'] > batt_total && item['PAN'] > pan_total);
                if(compatibleKits.length){
                    const table_types = ['solar_generator', 'hybrid', 'off_grid']
                    const tableRows = {};
                    if(table_types.length){
                        table_types.forEach(table_type => {
                            tableRows[table_type] = [];
                        })
                    }
                    console.log('step-1');console.log(tableRows);
                    for(let i = 0; i<compatibleKits.length; i++){
                        const compatibleKit = compatibleKits[i];
                        const handle = compatibleKit['handle'].split('?variant=')[0];
                        const variantId = compatibleKit['handle'].split('?variant=')[1];
                        let variantCost = 0;
                        if(compatibleKit['cost']){
                            variantCost = parseInt(compatibleKit['cost']);
                        }
                        fetch(`/products/${handle}.js`).then((response) => response.json()).then((productObject) => {
                            const tr = document.createElement('tr');
                            tr.onclick = () => window.location.href = `/products/${compatibleKit['handle']}`;
                            tr.dataset.handle = handle;
                            tr.dataset.variant = variantId;
                            let selectedVariant = {};
                            productObject.variants.forEach(variant => {
                                if(variant.id === parseInt(variantId)){
                                    selectedVariant = variant;
                                }
                            })
                            if(!selectedVariant.id){
                                selectedVariant = productObject.variants[0];
                            }
                            if(variantCost){
                                tr.dataset.margin = Number((1-(variantCost/selectedVariant.price)) * 100).toFixed(1);
                            }
                            tr.innerHTML = `
                            <td class="calc_pdt_details">
                                <div class="cpd_image">
                                    <img class="cpd_featured_image" src="${productObject.featured_image}">
                                    <img class="cpd_hover_image" src="${productObject.images[1]}">
                                </div>
                                <div class="cpd_control">
                                    <span class="cpd_title">${productObject.title}</span>
                                    <table class="cpd_table">
                                        <thead class="cck-header">
                                            <tr>
                                                <td title="Inverter Capacity">INV</td>
                                                <td title="Battery Capacity">BATT</td>
                                                <td title="Panels Capacity">PAN</td>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            <tr>
                                              <td>${compatibleKit['INV']}</td>
                                              <td>${compatibleKit['BATT']}</td>
                                              <td>${compatibleKit['PAN']}</td>
                                           </tr>
                                        </tbody>
                                    </table>
                                    <span class="cpd_price">
                                        <span class="cpd_real_price">${Shopify.formatMoneyCalc(selectedVariant.price)}</span>
                                        <span class="cpd_compare_at_price">${selectedVariant.compare_at_price > selectedVariant.price ? Shopify.formatMoneyCalc(selectedVariant.compare_at_price) : '' }</span>
                                        <p class="cpd_money_saved">${selectedVariant.compare_at_price > selectedVariant.price ? '<span>You Saved: </span>'+Shopify.formatMoneyCalc((selectedVariant.compare_at_price - selectedVariant.price)) : '' }</p>
                                    </span>
                                    <button class="cdp_atc_btn" onclick="calcAddToCart(event, this)" data-variant="${selectedVariant.id}">ADD TO CART</button>
                                </div>
                            </td>
                            <td>${compatibleKit['INV']}</td>
                            <td>${compatibleKit['BATT']}</td>
                            <td>${compatibleKit['PAN']}</td>
                            `;
                            if(table_types.length){
                                if(productObject.title.includes('Sol-Ark') || productObject.title.includes('Sol Ark')){
                                    tableRows['hybrid'][i] = tr;
                                }else if(productObject.title.includes('DPK-')){
                                    tableRows['solar_generator'][i] = tr;
                                }else{
                                    table_types.forEach(table_type => {
                                        //console.log('step-2');console.log(table_type);
                                        const capitalTableTypeString = specialCasesTableTypeStringChecker(table_type);
                                        //console.log('step-3');console.log(capitalTableTypeString);
                                        if(productObject.title.includes(capitalTableTypeString)){
                                            //console.log('step-4');console.log(productObject.title);
                                            tableRows[table_type][i] = tr;
                                        }
                                    })
                                }
                            }

                            //tableKits.style.display = '';
                            if(i === compatibleKits.length-1){
                                //console.log(tableRows);
                                tableKits.forEach(tableKit => {
                                    const cckData = tableKit.querySelector('.cck-data');
                                    if(cckData){
                                        cckData.innerHTML = '';
                                        const table_type = tableKit.id.replace('calc_table_', '');
                                        //console.log(table_type);
                                        if(tableRows[table_type] && tableRows[table_type].length){
                                            tableRows[table_type] = tableRows[table_type].sort((p1, p2) => (p1.dataset.margin < p2.dataset.margin) ? 1 : (p1.dataset.margin > p2.dataset.margin) ? -1 : 0);
                                            //here we can add - round by 5 results per table
                                            tableRows[table_type].forEach(tr => {
                                                cckData.append(tr);
                                            })
                                            tableKit.style.display = '';
                                        }
                                    }
                                })
                                const arrows = document.querySelectorAll('.calc-arrow-wrap');
                                if(arrows){
                                    arrows.forEach(arrow => {
                                        arrow.style.display = '';
                                    })
                                }
                                const title = document.querySelector('.calculator-hidden-title');
                                if(title){
                                    title.style.display = '';
                                }
                            }
                        });
                    }
                }else{
                    if(tableKits.length){
                        tableKits.forEach(tableKit => {
                            const cckData = tableKit.querySelector('.cck-data');
                            tableKit.style.display = 'none';
                            if(cckData){
                                cckData.innerHTML = '';
                            }
                        })
                    }
                    const title = document.querySelector('.calculator-hidden-title');
                    if(title){
                        title.style.display = '';
                    }
                }
            }else {
                if(tableKits.length){
                    tableKits.forEach(tableKit => {
                        const cckData = tableKit.querySelector('.cck-data');
                        tableKit.style.display = 'none';
                        if(cckData){
                            cckData.innerHTML = '';
                        }
                    })
                }
                const title = document.querySelector('.calculator-hidden-title');
                if(title){
                    title.style.display = '';
                }
            }
        }

        KlaviyoSubscribe.attachToForms('.mc-embedded-subscribe-formm', {
            hide_form_on_success: true,
            custom_success_message: true,
            extra_properties: {
                $watts: kilowatt_hours_per_month_value
            }
        });
    }
    function addSection(event, element){
        const calculatorLines = document.querySelector('#calculator-lines');
        const section = document.createElement('div');
        section.classList.add('calculator-line');
        section.innerHTML = `{% include 'watt-hour-calc-select' %}`;
        calculatorLines.append(section);
    }
    function calculatorApplianceName(event, element){
        const row = element.closest('.calculator-line');
        const optionData = JSON.parse(element.value);
        if(optionData.name === 'Custom'){
            const wattsInput = row.querySelector('[name="watts"]');
            if(wattsInput){
                wattsInput.removeAttribute('readonly');
                wattsInput.focus();
            }
        }
        element.dataset.value = element.value;
        applyValuesToRow(row, optionData, element);
        calculateTotals();
    }
    function calculatorWatts(event, element){
        element.setAttribute('readonly', '');
        const row = element.closest('.calculator-line');
        const applianceName =  row.querySelector(`[name="appliance-name"]`);
        if(applianceName && applianceName.dataset.value){
            try{
                let optionData = JSON.parse(applianceName.dataset.value);
                if(optionData){
                    optionData.watts = element.value;
                    optionData = calculateRowTotals(optionData);
                    applyValuesToRow(row, optionData, applianceName);
                    calculateTotals();
                }
            } catch (e){
                alert('Please select Appliance!');
                element.value = 0;
            }
        }
    }
    function calculatorQuantity(event, element){
        const row = element.closest('.calculator-line');
        const applianceName =  row.querySelector(`[name="appliance-name"]`);
        if(applianceName && applianceName.dataset.value){
            try{
                let optionData = JSON.parse(applianceName.dataset.value);
                if(optionData){
                    optionData.quantity = element.value;
                    optionData = calculateRowTotals(optionData);
                    applyValuesToRow(row, optionData, applianceName);
                    calculateTotals();
                }
            } catch (e){
                alert('Please select Appliance!');
                element.value = 0;
            }
        }
    }
    function calculatorHoursOfUse(event, element){
        const row = element.closest('.calculator-line');
        const applianceName =  row.querySelector(`[name="appliance-name"]`);
        if(applianceName && applianceName.dataset.value){
            try{
                let optionData = JSON.parse(applianceName.dataset.value);
                if(optionData){
                    optionData.hoursOfUse = element.value;
                    optionData = calculateRowTotals(optionData);
                    applyValuesToRow(row, optionData, applianceName);
                    calculateTotals();
                }
            } catch (e){
                alert('Please select Appliance!');
                element.value = 0;
            }
        }
    }
    function calculatorRemoveRow(event, element){
        const row = element.closest('.calculator-line');
        row.remove();
        calculateTotals();
    }
    function calcAddToCart(e, element){
        e.preventDefault();
        e.stopPropagation();
        const variantId = element.dataset.variant;
        const qty = 1;
        const properties = {};
        fetch('/cart/add.js', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({'items': [{
                    'id': variantId,
                    'quantity': qty,
                    'properties': properties
                }]})
        }).then(response => {
            window.location.href = '/cart';
        })
    }
    class wattSlider {
        constructor() {
            this.swiper = new Swiper(".calc-arrows-scroller .calc-swiper-results", {});
            this.initSwiper();
            window.addEventListener('resize', () => {
                this.initSwiper();
            })
        }
        initSwiper(){
            this.swiper.destroy();
            if(window.innerWidth < 961){
                this.swiper = new Swiper(".calc-arrows-scroller .calc-swiper-results", {
                    navigation: {
                        nextEl: ".calc-arrows-scroller .swiper-button-next",
                        prevEl: ".calc-arrows-scroller .swiper-button-prev",
                    }
                });
            }
        }
    }
    (function (){
        const swiper = new wattSlider();
    })();
</script>